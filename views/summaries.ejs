<% if(isAuth) { %>
<% include ./particals/navbarLogout %>
<% } else { %>
<% include ./particals/navbar %>
<% } %>

<h1 id="testInput">click me</h1>

<script>
    document.querySelector('#testInput').addEventListener('click', () => {
        console.log("changed data");
    })
</script>

<textarea name="content" id="editor">This is some sample content.</textarea>
<button id="submit">Submit</button>
<script>
    class MyUploadAdapter {
        constructor(loader) {
            // CKEditor 5's FileLoader instance.
            this.loader = loader;

            // URL where to send files.
            this.url = '/book/summary/image';
        }

        // Starts the upload process.
        upload() {
            console.log('uploading');
            return new Promise((resolve, reject) => {
                this._initRequest();
                this._initListeners(resolve, reject);
                this._sendRequest();
            });
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Example implementation using XMLHttpRequest.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            xhr.open('POST', this.url, true);
            xhr.responseType = 'json';
        }

        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = 'Couldn\'t upload file:' + ` ${loader.file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                resolve({
                    default: response.url
                });
            });

            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        // Prepares the data and sends the request.
        _sendRequest() {
            const data = new FormData();

            data.append('upload', this.loader.file);

            this.xhr.send(data);
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            return new MyUploadAdapter(loader);
        };
    }

    let doc = document.querySelector('#editor');
    let editor = null;
    ClassicEditor.doc
    ClassicEditor
        .create(doc, {
            extraPlugins: [ MyCustomUploadAdapterPlugin ]
        })
        .then(e => {
            editor = e;
            console.log(editor);
        })

        .catch(error => {
            console.error(error);
        });


    
    document.querySelector('#submit').addEventListener('click', () => {
        const editorData = editor.getData();
        console.log(editorData);
        var xhr = new XMLHttpRequest();
        xhr.open("POST", '/book/summary', true);

        //Send the proper header information along with the request
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

        xhr.send(editorData);
    });
</script>

<style>
    .ck-editor__editable {
        min-height: 400px;
    }
</style>

<% include ./particals/body %>